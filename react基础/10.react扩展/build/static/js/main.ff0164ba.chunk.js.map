{"version":3,"sources":["components/1.setState/index.jsx","components/2.hooks/index.jsx","components/3.fragment/index.jsx","components/4.context/index.jsx","components/5.optimize/index.jsx","components/6.renderProps/index.jsx","components/7.errorBoundary/Child.jsx","components/7.errorBoundary/Parent.jsx","App.jsx","index.js"],"names":["Demo","state","count","increment","setState","props","this","onClick","Component","React","useState","setCount","myRef","useRef","useEffect","timer","setInterval","clearInterval","ReactDOM","unmountComponentAtNode","document","getElementById","type","ref","value","current","alert","MyContext","createContext","A","username","className","Provider","B","C","Consumer","Parent","carName","changeCar","console","log","PureComponent","Child","render","name","users","map","user","age","id","hasError","error","App"],"mappings":"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","file":"static/js/main.ff0164ba.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Demo extends Component {\r\n\r\n  state = {count: 0}\r\n\r\n  increment = () => {\r\n    // 对象式 setState\r\n    // const {count} = this.state;\r\n    // this.setState({count: count + 1}, () => {console.log(this.state.count);});\r\n    // console.log(this.state.count); // 0. 因为 react 页面是异步更新的，调用 setState 更新状态并不会马上执行。如果想访问更新完毕后的状态就需要 setState 的第二个参数\r\n\r\n    // 函数式 setState\r\n    // 函数式 setState 不用先获取到原来的值，因为能从参数中直接访问到 state\r\n    this.setState((state, props) => ({count: state.count + 1}));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>setState 组件</h1>\r\n        <h2>当前求和为：{this.state.count}</h2>\r\n        <button onClick={this.increment}>+1</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Demo;","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\n// 类式组件\r\n// class Demo extends React.Component {\r\n//   state = {count: 0};\r\n//   myRef = React.createRef();\r\n//   componentDidMount() {\r\n//     this.timer = setInterval(() => {\r\n//       this.setState(state => ({count: state.count + 1}));\r\n//     }, 1000);\r\n//   }\r\n//   componentWillUnmount() {\r\n//     clearInterval(this.timer);\r\n//   }\r\n//   add = () => {\r\n//     this.setState(state => ({count: state.count + 1}));\r\n//   }\r\n//   unmount = () => {\r\n//     ReactDOM.unmountComponentAtNode(document.getElementById('root'));\r\n//   }\r\n//   show = () => {\r\n//     const {value} = this.myRef.current;\r\n//     alert(value);\r\n//   }\r\n//   render() {\r\n//     return (\r\n//       <div>       \r\n//         <h1>hooks 组件</h1>\r\n//         <h2>当前求和为：{this.state.count}</h2>\r\n//         <button onClick={this.add}>+1</button>&nbsp;\r\n//         <button onClick={this.unmount}>卸载组件</button>&nbsp;\r\n//         <input type=\"text\" ref={this.myRef}/>&nbsp;\r\n//         <button onClick={this.show}>点击提示数据</button>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// 函数式组件\r\nfunction Demo () {\r\n  const [count, setCount] = React.useState(0) // useState 返回一个数组，数组的第一位为状态的值，第二位为改变状态的方法\r\n  // console.log(count, setCount);\r\n  // 通过 useRef 方法可以拿到某个具体的组件\r\n  const myRef = React.useRef();\r\n  // 通过 useEffect 方法能够让函数式组件使用钩子\r\n  React.useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setCount(count => count + 1);\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(timer);\r\n    }\r\n  }, []);\r\n  function add() {\r\n    // setCount(count + 1); // useState 写法一\r\n    setCount(count => count + 1); // useState 写法二\r\n  }\r\n  function unmount() {\r\n    ReactDOM.unmountComponentAtNode(document.getElementById('root'));\r\n  }\r\n  function show() {\r\n    const {value} = myRef.current;\r\n    alert(value);\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>hooks 组件</h1>\r\n      <h2>当前求和为：{count}</h2>\r\n      <button onClick={add}>+1</button>&nbsp;\r\n      <button onClick={unmount}>卸载组件</button>&nbsp;\r\n      <input type=\"text\" ref={myRef}/>&nbsp;\r\n      <button onClick={show}>点击提示数据</button>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Demo;","import React, { Component, Fragment } from 'react';\r\n\r\nclass Demo extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <h1>Fragment 组件</h1>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Demo;","import React, { Component } from 'react';\r\nimport './index.css'\r\n// 创建 Context 对象\r\nconst MyContext = React.createContext();\r\n\r\nclass A extends Component {\r\n  state = {username: 'byl'};\r\n  render() {\r\n    const {username} = this.state;\r\n    return (\r\n      <div className=\"parent\">\r\n        <h3>我是 A 组件</h3>\r\n        <h4>我的用户名是：{username}</h4>\r\n        <MyContext.Provider value={username}>\r\n          <B username={username} />\r\n        </MyContext.Provider>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nclass B extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"child\">\r\n        <h3>我是 B 组件</h3>\r\n        <h4>我从 A 组件接收到的用户名：{this.props.username}</h4>\r\n        <C />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// 类式组件接收\r\n// class C extends Component {\r\n//   // 声明接收 context\r\n//   static contextType = MyContext;\r\n//   render() {\r\n//     console.log(this.context);\r\n//     return (\r\n//       <div className=\"grand\">\r\n//         <h3>我是 C 组件</h3>\r\n//         <h4>我从 A 组件接收到的用户名：{this.context}</h4>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n// 函数式组件接收\r\nfunction C() {\r\n  return (\r\n    <div className=\"grand\">\r\n      <h3>我是 C 组件</h3>\r\n      <h4>我从 A 组件接收到的用户名：\r\n        <MyContext.Consumer>\r\n          {\r\n            value => value\r\n          }\r\n        </MyContext.Consumer>\r\n      </h4>\r\n    </div>\r\n  );\r\n}\r\nexport default A;","import React, { PureComponent } from 'react';\r\nimport './index.css'\r\nclass Parent extends PureComponent {\r\n  state = {carName: '奔驰c63'};\r\n  changeCar = () => {\r\n    this.setState({carName: '迈巴赫'});\r\n  }\r\n  render() {\r\n    console.log('parent---render');\r\n    const {carName} = this.state;\r\n    return (\r\n      <div className=\"parent\">\r\n        <h2>我是 Parent 组件</h2>\r\n        <span>我的车：{carName}</span>&nbsp;\r\n        <button onClick={this.changeCar}>点我换车</button>\r\n        <Child carName={carName} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nclass Child extends PureComponent {\r\n  render() {\r\n    console.log('child---render');\r\n    return (\r\n      <div className=\"child\">\r\n        <h2>我是 Child 组件</h2>\r\n        <span>我接到的车是：{this.props.carName}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Parent;","import React, { Component } from 'react';\r\nimport './index.css'\r\nclass Parent extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"parent\">\r\n        <h3>我是 Parent 组件</h3>\r\n        <A render={(name) => <B name={name}/>}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nclass A extends Component {\r\n  state = {name: 'byl'};\r\n  render() {\r\n    const {name} = this.state;\r\n    return (\r\n      <div className=\"a\">\r\n        <h3>我是 A 组件</h3>\r\n        {this.props.render(name)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nclass B extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"b\">\r\n        <h3>我是 B 组件，名字：{this.props.name}</h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Parent;","import React, { Component } from 'react';\r\n\r\nclass Child extends Component {\r\n  state = {\r\n    // users: [\r\n    //   {id: '001', name: 'tom', age: 18},\r\n    //   {id: '002', name: 'byl', age: 22},\r\n    //   {id: '003', name: 'hmy', age: 24},\r\n    // ]\r\n    users: 'abc'\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>我是 Child 组件</h2>\r\n        {this.state.users.map(user => {\r\n          return <h4 key={user.id}>{user.name} --- {user.age}</h4>\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Child;","import React, { Component } from 'react';\r\nimport Child from './Child';\r\nclass Parent extends Component {\r\n  state = {\r\n    hasError: '' // 用于标识子组件是否产生错误\r\n  }\r\n  // 当该组件的子组件出现错误时会触发 getDerivedStateFromError 调用，并携带错误信息\r\n  static getDerivedStateFromError(error) {\r\n    console.log(error);\r\n    return {hasError: error};\r\n  }\r\n\r\n  // 该函数也属于钩子，当子组件出错时会自动被调用。该函数主要用来统计错误次数，反馈给服务器，用于通知编码人员解决 bug\r\n  componentDidCatch() {\r\n    console.log('发生错误！');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>我是 Parent 组件</h2>\r\n        {this.state.hasError ? <h2>当前网络不稳定，请稍后重试</h2> : <Child />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Parent;","import React, { Component } from 'react'\nimport SetState from './components/1.setState'\nimport Hooks from './components/2.hooks'\nimport Fragment from './components/3.fragment'\nimport Context from './components/4.context'\nimport Optimize from './components/5.optimize'\nimport RenderProps from './components/6.renderProps'\nimport ErrorBoundary from './components/7.errorBoundary/Parent'\nexport default class App extends Component {\n\n  render () {\n    return (\n      <div>\n        App..\n        <hr />\n        <SetState />\n        <hr />\n        <Hooks />\n        <hr />\n        <Fragment />\n        <hr />\n        <h1>Context 组件</h1>\n        <Context />\n        <hr />\n        <h1>Optimize 组件</h1>\n        <Optimize />\n        <hr />\n        <h1>renderProps 组件</h1>\n        <RenderProps />\n        <hr />\n        <h1>errorBoundary 组件</h1>\n        <ErrorBoundary />\n      </div>\n    )\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));\n"],"sourceRoot":""}