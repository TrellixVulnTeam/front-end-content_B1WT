{"ast":null,"code":"var _jsxFileName = \"D:\\\\VSCode\\\\\\u524D\\u7AEF\\u5185\\u5BB9\\\\react\\u57FA\\u7840\\\\10.react\\u6269\\u5C55\\\\src\\\\components\\\\2.hooks\\\\index.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom'; // 类时组件\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Demo extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0\n    };\n    this.myRef = /*#__PURE__*/React.createRef();\n\n    this.add = () => {\n      this.setState(state => ({\n        count: state.count + 1\n      }));\n    };\n\n    this.unmount = () => {\n      ReactDOM.unmountComponentAtNode(document.getElementById('root'));\n    };\n\n    this.show = () => {\n      const {\n        value\n      } = this.myRef.current;\n      alert(value);\n    };\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.setState(state => ({\n        count: state.count + 1\n      }));\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"hooks \\u7EC4\\u4EF6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A\\uFF1A\", this.state.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.add,\n        children: \"+1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.unmount,\n        children: \"\\u5378\\u8F7D\\u7EC4\\u4EF6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: this.myRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.show,\n        children: \"\\u70B9\\u51FB\\u63D0\\u793A\\u6570\\u636E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), \"\\xA0\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  }\n\n} // 函数式组件\n// function Demo () {\n//   const [count, setCount] = React.useState(0) // useState 返回一个数组，数组的第一位为状态的值，第二位为改变状态的方法\n//   // console.log(count, setCount);\n//   // 通过 useEffect 方法能够让函数式组件使用钩子\n//   React.useEffect(() => {\n//     const timer = setInterval(() => {\n//       setCount(count => count + 1);\n//       console.log('111');\n//     }, 1000);\n//     return () => {\n//       clearInterval(timer);\n//     }\n//   }, []);\n//   function add() {\n//     // setCount(count + 1); // useState 写法一\n//     setCount(count => count + 1); // useState 写法二\n//   }\n//   function unmount() {\n//     ReactDOM.unmountComponentAtNode(document.getElementById('root'));\n//   }\n//   return (\n//     <div>\n//       <h1>hooks 组件</h1>\n//       <h2>当前求和为：{count}</h2>\n//       <button onClick={add}>+1</button>&nbsp;\n//       <button onClick={unmount}>卸载组件</button>&nbsp;\n//     </div>\n//   )\n// }\n\n\nexport default Demo;","map":{"version":3,"sources":["D:/VSCode/前端内容/react基础/10.react扩展/src/components/2.hooks/index.jsx"],"names":["React","ReactDOM","Demo","Component","state","count","myRef","createRef","add","setState","unmount","unmountComponentAtNode","document","getElementById","show","value","current","alert","componentDidMount","timer","setInterval","componentWillUnmount","clearInterval","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CACA;;;;AACA,MAAMC,IAAN,SAAmBF,KAAK,CAACG,SAAzB,CAAmC;AAAA;AAAA;AAAA,SACjCC,KADiC,GACzB;AAACC,MAAAA,KAAK,EAAE;AAAR,KADyB;AAAA,SAEjCC,KAFiC,gBAEzBN,KAAK,CAACO,SAAN,EAFyB;;AAAA,SAWjCC,GAXiC,GAW3B,MAAM;AACV,WAAKC,QAAL,CAAcL,KAAK,KAAK;AAACC,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AAAtB,OAAL,CAAnB;AACD,KAbgC;;AAAA,SAcjCK,OAdiC,GAcvB,MAAM;AACdT,MAAAA,QAAQ,CAACU,sBAAT,CAAgCC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAhC;AACD,KAhBgC;;AAAA,SAiBjCC,IAjBiC,GAiB1B,MAAM;AACX,YAAM;AAACC,QAAAA;AAAD,UAAU,KAAKT,KAAL,CAAWU,OAA3B;AACAC,MAAAA,KAAK,CAACF,KAAD,CAAL;AACD,KApBgC;AAAA;;AAGjCG,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,GAAaC,WAAW,CAAC,MAAM;AAC7B,WAAKX,QAAL,CAAcL,KAAK,KAAK;AAACC,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AAAtB,OAAL,CAAnB;AACD,KAFuB,EAErB,IAFqB,CAAxB;AAGD;;AACDgB,EAAAA,oBAAoB,GAAG;AACrBC,IAAAA,aAAa,CAAC,KAAKH,KAAN,CAAb;AACD;;AAWDI,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,2DAAW,KAAKnB,KAAL,CAAWC,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAE,KAAKG,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,uBAIE;AAAQ,QAAA,OAAO,EAAE,KAAKE,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,uBAKE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,GAAG,EAAE,KAAKJ;AAA7B;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAQ,QAAA,OAAO,EAAE,KAAKQ,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AAhCgC,C,CAmCnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAeZ,IAAf","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\n// 类时组件\r\nclass Demo extends React.Component {\r\n  state = {count: 0};\r\n  myRef = React.createRef();\r\n  componentDidMount() {\r\n    this.timer = setInterval(() => {\r\n      this.setState(state => ({count: state.count + 1}));\r\n    }, 1000);\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n  }\r\n  add = () => {\r\n    this.setState(state => ({count: state.count + 1}));\r\n  }\r\n  unmount = () => {\r\n    ReactDOM.unmountComponentAtNode(document.getElementById('root'));\r\n  }\r\n  show = () => {\r\n    const {value} = this.myRef.current;\r\n    alert(value);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>       \r\n        <h1>hooks 组件</h1>\r\n        <h2>当前求和为：{this.state.count}</h2>\r\n        <button onClick={this.add}>+1</button>&nbsp;\r\n        <button onClick={this.unmount}>卸载组件</button>&nbsp;\r\n        <input type=\"text\" ref={this.myRef}/>\r\n        <button onClick={this.show}>点击提示数据</button>&nbsp;\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// 函数式组件\r\n// function Demo () {\r\n//   const [count, setCount] = React.useState(0) // useState 返回一个数组，数组的第一位为状态的值，第二位为改变状态的方法\r\n//   // console.log(count, setCount);\r\n//   // 通过 useEffect 方法能够让函数式组件使用钩子\r\n//   React.useEffect(() => {\r\n//     const timer = setInterval(() => {\r\n//       setCount(count => count + 1);\r\n//       console.log('111');\r\n//     }, 1000);\r\n//     return () => {\r\n//       clearInterval(timer);\r\n//     }\r\n//   }, []);\r\n//   function add() {\r\n//     // setCount(count + 1); // useState 写法一\r\n//     setCount(count => count + 1); // useState 写法二\r\n//   }\r\n//   function unmount() {\r\n//     ReactDOM.unmountComponentAtNode(document.getElementById('root'));\r\n//   }\r\n//   return (\r\n//     <div>\r\n//       <h1>hooks 组件</h1>\r\n//       <h2>当前求和为：{count}</h2>\r\n//       <button onClick={add}>+1</button>&nbsp;\r\n//       <button onClick={unmount}>卸载组件</button>&nbsp;\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n\r\nexport default Demo;"]},"metadata":{},"sourceType":"module"}