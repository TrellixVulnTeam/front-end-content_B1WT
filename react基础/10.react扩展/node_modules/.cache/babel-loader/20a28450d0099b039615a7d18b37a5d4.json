{"ast":null,"code":"var _jsxFileName = \"D:\\\\VSCode\\\\\\u524D\\u7AEF\\u5185\\u5BB9\\\\react\\u57FA\\u7840\\\\10.react\\u6269\\u5C55\\\\src\\\\components\\\\2.hooks\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom'; // 类式组件\n// class Demo extends React.Component {\n//   state = {count: 0};\n//   myRef = React.createRef();\n//   componentDidMount() {\n//     this.timer = setInterval(() => {\n//       this.setState(state => ({count: state.count + 1}));\n//     }, 1000);\n//   }\n//   componentWillUnmount() {\n//     clearInterval(this.timer);\n//   }\n//   add = () => {\n//     this.setState(state => ({count: state.count + 1}));\n//   }\n//   unmount = () => {\n//     ReactDOM.unmountComponentAtNode(document.getElementById('root'));\n//   }\n//   show = () => {\n//     const {value} = this.myRef.current;\n//     alert(value);\n//   }\n//   render() {\n//     return (\n//       <div>       \n//         <h1>hooks 组件</h1>\n//         <h2>当前求和为：{this.state.count}</h2>\n//         <button onClick={this.add}>+1</button>&nbsp;\n//         <button onClick={this.unmount}>卸载组件</button>&nbsp;\n//         <input type=\"text\" ref={this.myRef}/>&nbsp;\n//         <button onClick={this.show}>点击提示数据</button>\n//       </div>\n//     );\n//   }\n// }\n// 函数式组件\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Demo() {\n  _s();\n\n  const [count, setCount] = React.useState(0); // useState 返回一个数组，数组的第一位为状态的值，第二位为改变状态的方法\n  // console.log(count, setCount);\n  // 通过 useRef 方法可以拿到某个具体的组件\n\n  const myRef = React.useRef(); // 通过 useEffect 方法能够让函数式组件使用钩子\n\n  React.useEffect(() => {\n    const timer = setInterval(() => {\n      setCount(count => count + 1);\n    }, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  function add() {\n    // setCount(count + 1); // useState 写法一\n    setCount(count => count + 1); // useState 写法二\n  }\n\n  function unmount() {\n    ReactDOM.unmountComponentAtNode(document.getElementById('root'));\n  }\n\n  function show() {\n    const {\n      value\n    } = myRef.current;\n    alert(value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hooks \\u7EC4\\u4EF6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A\\uFF1A\", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: add,\n      children: \"+1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: unmount,\n      children: \"\\u5378\\u8F7D\\u7EC4\\u4EF6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: myRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: show,\n      children: \"\\u70B9\\u51FB\\u63D0\\u793A\\u6570\\u636E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Demo, \"w0KNyNtEDUQM6rYcyHug4bzJH/Q=\");\n\n_c = Demo;\nexport default Demo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Demo\");","map":{"version":3,"sources":["D:/VSCode/前端内容/react基础/10.react扩展/src/components/2.hooks/index.jsx"],"names":["React","ReactDOM","Demo","count","setCount","useState","myRef","useRef","useEffect","timer","setInterval","clearInterval","add","unmount","unmountComponentAtNode","document","getElementById","show","value","current","alert"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AACA,SAASC,IAAT,GAAiB;AAAA;;AACf,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,KAAK,CAACK,QAAN,CAAe,CAAf,CAA1B,CADe,CAC6B;AAC5C;AACA;;AACA,QAAMC,KAAK,GAAGN,KAAK,CAACO,MAAN,EAAd,CAJe,CAKf;;AACAP,EAAAA,KAAK,CAACQ,SAAN,CAAgB,MAAM;AACpB,UAAMC,KAAK,GAAGC,WAAW,CAAC,MAAM;AAC9BN,MAAAA,QAAQ,CAACD,KAAK,IAAIA,KAAK,GAAG,CAAlB,CAAR;AACD,KAFwB,EAEtB,IAFsB,CAAzB;AAGA,WAAO,MAAM;AACXQ,MAAAA,aAAa,CAACF,KAAD,CAAb;AACD,KAFD;AAGD,GAPD,EAOG,EAPH;;AAQA,WAASG,GAAT,GAAe;AACb;AACAR,IAAAA,QAAQ,CAACD,KAAK,IAAIA,KAAK,GAAG,CAAlB,CAAR,CAFa,CAEiB;AAC/B;;AACD,WAASU,OAAT,GAAmB;AACjBZ,IAAAA,QAAQ,CAACa,sBAAT,CAAgCC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAhC;AACD;;AACD,WAASC,IAAT,GAAgB;AACd,UAAM;AAACC,MAAAA;AAAD,QAAUZ,KAAK,CAACa,OAAtB;AACAC,IAAAA,KAAK,CAACF,KAAD,CAAL;AACD;;AACD,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,yDAAWf,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAQ,MAAA,OAAO,EAAES,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,uBAIE;AAAQ,MAAA,OAAO,EAAEC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,uBAKE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,GAAG,EAAEP;AAAxB;AAAA;AAAA;AAAA;AAAA,YALF,uBAME;AAAQ,MAAA,OAAO,EAAEW,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GAnCQf,I;;KAAAA,I;AAsCT,eAAeA,IAAf","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\n// 类式组件\r\n// class Demo extends React.Component {\r\n//   state = {count: 0};\r\n//   myRef = React.createRef();\r\n//   componentDidMount() {\r\n//     this.timer = setInterval(() => {\r\n//       this.setState(state => ({count: state.count + 1}));\r\n//     }, 1000);\r\n//   }\r\n//   componentWillUnmount() {\r\n//     clearInterval(this.timer);\r\n//   }\r\n//   add = () => {\r\n//     this.setState(state => ({count: state.count + 1}));\r\n//   }\r\n//   unmount = () => {\r\n//     ReactDOM.unmountComponentAtNode(document.getElementById('root'));\r\n//   }\r\n//   show = () => {\r\n//     const {value} = this.myRef.current;\r\n//     alert(value);\r\n//   }\r\n//   render() {\r\n//     return (\r\n//       <div>       \r\n//         <h1>hooks 组件</h1>\r\n//         <h2>当前求和为：{this.state.count}</h2>\r\n//         <button onClick={this.add}>+1</button>&nbsp;\r\n//         <button onClick={this.unmount}>卸载组件</button>&nbsp;\r\n//         <input type=\"text\" ref={this.myRef}/>&nbsp;\r\n//         <button onClick={this.show}>点击提示数据</button>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// 函数式组件\r\nfunction Demo () {\r\n  const [count, setCount] = React.useState(0) // useState 返回一个数组，数组的第一位为状态的值，第二位为改变状态的方法\r\n  // console.log(count, setCount);\r\n  // 通过 useRef 方法可以拿到某个具体的组件\r\n  const myRef = React.useRef();\r\n  // 通过 useEffect 方法能够让函数式组件使用钩子\r\n  React.useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setCount(count => count + 1);\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(timer);\r\n    }\r\n  }, []);\r\n  function add() {\r\n    // setCount(count + 1); // useState 写法一\r\n    setCount(count => count + 1); // useState 写法二\r\n  }\r\n  function unmount() {\r\n    ReactDOM.unmountComponentAtNode(document.getElementById('root'));\r\n  }\r\n  function show() {\r\n    const {value} = myRef.current;\r\n    alert(value);\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>hooks 组件</h1>\r\n      <h2>当前求和为：{count}</h2>\r\n      <button onClick={add}>+1</button>&nbsp;\r\n      <button onClick={unmount}>卸载组件</button>&nbsp;\r\n      <input type=\"text\" ref={myRef}/>&nbsp;\r\n      <button onClick={show}>点击提示数据</button>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Demo;"]},"metadata":{},"sourceType":"module"}