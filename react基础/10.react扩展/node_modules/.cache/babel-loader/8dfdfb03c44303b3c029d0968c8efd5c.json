{"ast":null,"code":"import _slicedToArray from\"D:/VSCode/\\u524D\\u7AEF\\u5185\\u5BB9/react\\u57FA\\u7840/10.react\\u6269\\u5C55/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import ReactDOM from'react-dom';// 类式组件\n// class Demo extends React.Component {\n//   state = {count: 0};\n//   myRef = React.createRef();\n//   componentDidMount() {\n//     this.timer = setInterval(() => {\n//       this.setState(state => ({count: state.count + 1}));\n//     }, 1000);\n//   }\n//   componentWillUnmount() {\n//     clearInterval(this.timer);\n//   }\n//   add = () => {\n//     this.setState(state => ({count: state.count + 1}));\n//   }\n//   unmount = () => {\n//     ReactDOM.unmountComponentAtNode(document.getElementById('root'));\n//   }\n//   show = () => {\n//     const {value} = this.myRef.current;\n//     alert(value);\n//   }\n//   render() {\n//     return (\n//       <div>       \n//         <h1>hooks 组件</h1>\n//         <h2>当前求和为：{this.state.count}</h2>\n//         <button onClick={this.add}>+1</button>&nbsp;\n//         <button onClick={this.unmount}>卸载组件</button>&nbsp;\n//         <input type=\"text\" ref={this.myRef}/>&nbsp;\n//         <button onClick={this.show}>点击提示数据</button>\n//       </div>\n//     );\n//   }\n// }\n// 函数式组件\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Demo(){var _React$useState=React.useState(0),_React$useState2=_slicedToArray(_React$useState,2),count=_React$useState2[0],setCount=_React$useState2[1];// useState 返回一个数组，数组的第一位为状态的值，第二位为改变状态的方法\n// console.log(count, setCount);\n// 通过 useRef 方法可以拿到某个具体的组件\nvar myRef=React.useRef();// 通过 useEffect 方法能够让函数式组件使用钩子\nReact.useEffect(function(){var timer=setInterval(function(){setCount(function(count){return count+1;});},1000);return function(){clearInterval(timer);};},[]);function add(){// setCount(count + 1); // useState 写法一\nsetCount(function(count){return count+1;});// useState 写法二\n}function unmount(){ReactDOM.unmountComponentAtNode(document.getElementById('root'));}function show(){var value=myRef.current.value;alert(value);}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"hooks \\u7EC4\\u4EF6\"}),/*#__PURE__*/_jsxs(\"h2\",{children:[\"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A\\uFF1A\",count]}),/*#__PURE__*/_jsx(\"button\",{onClick:add,children:\"+1\"}),\"\\xA0\",/*#__PURE__*/_jsx(\"button\",{onClick:unmount,children:\"\\u5378\\u8F7D\\u7EC4\\u4EF6\"}),\"\\xA0\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",ref:myRef}),\"\\xA0\",/*#__PURE__*/_jsx(\"button\",{onClick:show,children:\"\\u70B9\\u51FB\\u63D0\\u793A\\u6570\\u636E\"})]});}export default Demo;","map":{"version":3,"sources":["D:/VSCode/前端内容/react基础/10.react扩展/src/components/2.hooks/index.jsx"],"names":["React","ReactDOM","Demo","useState","count","setCount","myRef","useRef","useEffect","timer","setInterval","clearInterval","add","unmount","unmountComponentAtNode","document","getElementById","show","value","current","alert"],"mappings":"gMAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;wFACA,QAASC,CAAAA,IAAT,EAAiB,CACf,oBAA0BF,KAAK,CAACG,QAAN,CAAe,CAAf,CAA1B,oDAAOC,KAAP,qBAAcC,QAAd,qBAA4C;AAC5C;AACA;AACA,GAAMC,CAAAA,KAAK,CAAGN,KAAK,CAACO,MAAN,EAAd,CACA;AACAP,KAAK,CAACQ,SAAN,CAAgB,UAAM,CACpB,GAAMC,CAAAA,KAAK,CAAGC,WAAW,CAAC,UAAM,CAC9BL,QAAQ,CAAC,SAAAD,KAAK,QAAIA,CAAAA,KAAK,CAAG,CAAZ,EAAN,CAAR,CACD,CAFwB,CAEtB,IAFsB,CAAzB,CAGA,MAAO,WAAM,CACXO,aAAa,CAACF,KAAD,CAAb,CACD,CAFD,CAGD,CAPD,CAOG,EAPH,EAQA,QAASG,CAAAA,GAAT,EAAe,CACb;AACAP,QAAQ,CAAC,SAAAD,KAAK,QAAIA,CAAAA,KAAK,CAAG,CAAZ,EAAN,CAAR,CAA8B;AAC/B,CACD,QAASS,CAAAA,OAAT,EAAmB,CACjBZ,QAAQ,CAACa,sBAAT,CAAgCC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAhC,EACD,CACD,QAASC,CAAAA,IAAT,EAAgB,CACd,GAAOC,CAAAA,KAAP,CAAgBZ,KAAK,CAACa,OAAtB,CAAOD,KAAP,CACAE,KAAK,CAACF,KAAD,CAAL,CACD,CACD,mBACE,oCACE,0CADF,cAEE,6DAAWd,KAAX,GAFF,cAGE,eAAQ,OAAO,CAAEQ,GAAjB,gBAHF,qBAIE,eAAQ,OAAO,CAAEC,OAAjB,sCAJF,qBAKE,cAAO,IAAI,CAAC,MAAZ,CAAmB,GAAG,CAAEP,KAAxB,EALF,qBAME,eAAQ,OAAO,CAAEW,IAAjB,kDANF,GADF,CAUD,CAGD,cAAef,CAAAA,IAAf","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\n// 类式组件\r\n// class Demo extends React.Component {\r\n//   state = {count: 0};\r\n//   myRef = React.createRef();\r\n//   componentDidMount() {\r\n//     this.timer = setInterval(() => {\r\n//       this.setState(state => ({count: state.count + 1}));\r\n//     }, 1000);\r\n//   }\r\n//   componentWillUnmount() {\r\n//     clearInterval(this.timer);\r\n//   }\r\n//   add = () => {\r\n//     this.setState(state => ({count: state.count + 1}));\r\n//   }\r\n//   unmount = () => {\r\n//     ReactDOM.unmountComponentAtNode(document.getElementById('root'));\r\n//   }\r\n//   show = () => {\r\n//     const {value} = this.myRef.current;\r\n//     alert(value);\r\n//   }\r\n//   render() {\r\n//     return (\r\n//       <div>       \r\n//         <h1>hooks 组件</h1>\r\n//         <h2>当前求和为：{this.state.count}</h2>\r\n//         <button onClick={this.add}>+1</button>&nbsp;\r\n//         <button onClick={this.unmount}>卸载组件</button>&nbsp;\r\n//         <input type=\"text\" ref={this.myRef}/>&nbsp;\r\n//         <button onClick={this.show}>点击提示数据</button>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// 函数式组件\r\nfunction Demo () {\r\n  const [count, setCount] = React.useState(0) // useState 返回一个数组，数组的第一位为状态的值，第二位为改变状态的方法\r\n  // console.log(count, setCount);\r\n  // 通过 useRef 方法可以拿到某个具体的组件\r\n  const myRef = React.useRef();\r\n  // 通过 useEffect 方法能够让函数式组件使用钩子\r\n  React.useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setCount(count => count + 1);\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(timer);\r\n    }\r\n  }, []);\r\n  function add() {\r\n    // setCount(count + 1); // useState 写法一\r\n    setCount(count => count + 1); // useState 写法二\r\n  }\r\n  function unmount() {\r\n    ReactDOM.unmountComponentAtNode(document.getElementById('root'));\r\n  }\r\n  function show() {\r\n    const {value} = myRef.current;\r\n    alert(value);\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>hooks 组件</h1>\r\n      <h2>当前求和为：{count}</h2>\r\n      <button onClick={add}>+1</button>&nbsp;\r\n      <button onClick={unmount}>卸载组件</button>&nbsp;\r\n      <input type=\"text\" ref={myRef}/>&nbsp;\r\n      <button onClick={show}>点击提示数据</button>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Demo;"]},"metadata":{},"sourceType":"module"}