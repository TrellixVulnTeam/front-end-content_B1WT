{"ast":null,"code":"import _classCallCheck from\"D:/VSCode/\\u524D\\u7AEF\\u5185\\u5BB9/react\\u57FA\\u7840/10.react\\u6269\\u5C55/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"D:/VSCode/\\u524D\\u7AEF\\u5185\\u5BB9/react\\u57FA\\u7840/10.react\\u6269\\u5C55/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"D:/VSCode/\\u524D\\u7AEF\\u5185\\u5BB9/react\\u57FA\\u7840/10.react\\u6269\\u5C55/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"D:/VSCode/\\u524D\\u7AEF\\u5185\\u5BB9/react\\u57FA\\u7840/10.react\\u6269\\u5C55/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Demo=/*#__PURE__*/function(_Component){_inherits(Demo,_Component);var _super=_createSuper(Demo);function Demo(){var _this;_classCallCheck(this,Demo);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={count:0};_this.increment=function(){// 对象式 setState\n// const {count} = this.state;\n// this.setState({count: count + 1}, () => {console.log(this.state.count);});\n// console.log(this.state.count); // 0. 因为 react 页面是异步更新的，调用 setState 更新状态并不会马上执行。如果想访问更新完毕后的状态就需要 setState 的第二个参数\n// 函数式 setState\n// 函数式 setState 不用先获取到原来的值，因为能从参数中直接访问到 state\n_this.setState(function(state,props){return{count:state.count+1};});};return _this;}_createClass(Demo,[{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"setState \\u7EC4\\u4EF6\"}),/*#__PURE__*/_jsxs(\"h2\",{children:[\"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A\\uFF1A\",this.state.count]}),/*#__PURE__*/_jsx(\"button\",{onClick:this.increment,children:\"+1\"})]});}}]);return Demo;}(Component);export default Demo;","map":{"version":3,"sources":["D:/VSCode/前端内容/react基础/10.react扩展/src/components/1.setState/index.jsx"],"names":["React","Component","Demo","state","count","increment","setState","props"],"mappings":"gvBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,C,2FAEMC,CAAAA,I,mTAEJC,K,CAAQ,CAACC,KAAK,CAAE,CAAR,C,OAERC,S,CAAY,UAAM,CAChB;AACA;AACA;AACA;AAEA;AACA;AACA,MAAKC,QAAL,CAAc,SAACH,KAAD,CAAQI,KAAR,QAAmB,CAACH,KAAK,CAAED,KAAK,CAACC,KAAN,CAAc,CAAtB,CAAnB,EAAd,EACD,C,sDAED,iBAAS,CACP,mBACE,oCACE,6CADF,cAEE,6DAAW,KAAKD,KAAL,CAAWC,KAAtB,GAFF,cAGE,eAAQ,OAAO,CAAE,KAAKC,SAAtB,gBAHF,GADF,CAOD,C,kBAvBgBJ,S,EA0BnB,cAAeC,CAAAA,IAAf","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Demo extends Component {\r\n\r\n  state = {count: 0}\r\n\r\n  increment = () => {\r\n    // 对象式 setState\r\n    // const {count} = this.state;\r\n    // this.setState({count: count + 1}, () => {console.log(this.state.count);});\r\n    // console.log(this.state.count); // 0. 因为 react 页面是异步更新的，调用 setState 更新状态并不会马上执行。如果想访问更新完毕后的状态就需要 setState 的第二个参数\r\n\r\n    // 函数式 setState\r\n    // 函数式 setState 不用先获取到原来的值，因为能从参数中直接访问到 state\r\n    this.setState((state, props) => ({count: state.count + 1}));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>setState 组件</h1>\r\n        <h2>当前求和为：{this.state.count}</h2>\r\n        <button onClick={this.increment}>+1</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Demo;"]},"metadata":{},"sourceType":"module"}