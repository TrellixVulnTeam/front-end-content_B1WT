{"ast":null,"code":"var _jsxFileName = \"D:\\\\VSCode\\\\\\u524D\\u7AEF\\u5185\\u5BB9\\\\react\\u57FA\\u7840\\\\10.react\\u6269\\u5C55\\\\src\\\\components\\\\1.setState\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Demo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0\n    };\n\n    this.increment = () => {\n      // 对象式 setState\n      // const {count} = this.state;\n      // this.setState({count: count + 1}, () => {console.log(this.state.count);});\n      // console.log(this.state.count); // 0. 因为 react 页面是异步更新的，调用 setState 更新状态并不会马上执行。如果想访问更新完毕后的状态就需要 setState 的第二个参数\n      // 函数式 setState\n      // 函数式 setState 不用先获取到原来的值，因为能从参数中直接访问到 state\n      this.setState((state, props) => ({\n        count: state.count + 1\n      }));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"setState \\u7EC4\\u4EF6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A\\uFF1A\", this.state.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.increment,\n        children: \"+1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Demo;","map":{"version":3,"sources":["D:/VSCode/前端内容/react基础/10.react扩展/src/components/1.setState/index.jsx"],"names":["React","Component","Demo","state","count","increment","setState","props","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,MAAMC,IAAN,SAAmBD,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAE3BE,KAF2B,GAEnB;AAACC,MAAAA,KAAK,EAAE;AAAR,KAFmB;;AAAA,SAI3BC,SAJ2B,GAIf,MAAM;AAChB;AACA;AACA;AACA;AAEA;AACA;AACA,WAAKC,QAAL,CAAc,CAACH,KAAD,EAAQI,KAAR,MAAmB;AAACH,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AAAtB,OAAnB,CAAd;AACD,KAb0B;AAAA;;AAe3BI,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,2DAAW,KAAKL,KAAL,CAAWC,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAE,KAAKC,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAvB0B;;AA0B7B,eAAeH,IAAf","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Demo extends Component {\r\n\r\n  state = {count: 0}\r\n\r\n  increment = () => {\r\n    // 对象式 setState\r\n    // const {count} = this.state;\r\n    // this.setState({count: count + 1}, () => {console.log(this.state.count);});\r\n    // console.log(this.state.count); // 0. 因为 react 页面是异步更新的，调用 setState 更新状态并不会马上执行。如果想访问更新完毕后的状态就需要 setState 的第二个参数\r\n\r\n    // 函数式 setState\r\n    // 函数式 setState 不用先获取到原来的值，因为能从参数中直接访问到 state\r\n    this.setState((state, props) => ({count: state.count + 1}));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>setState 组件</h1>\r\n        <h2>当前求和为：{this.state.count}</h2>\r\n        <button onClick={this.increment}>+1</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Demo;"]},"metadata":{},"sourceType":"module"}